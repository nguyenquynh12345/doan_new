/**
 * Spacing rules:
 * p for padding
 * m for margin
 * exp pt-xxs -> padding top xxs
 * exp p-sm -> padding all sm
 * margin with n is negative
 * exp m-sm-n -> margin all sm negative
 */

$spacing-unit: none, xxs, xs, sm, md, lg, xl, 2xl, 3xl, 4xl, 5xl, 6xl, 7xl, 8xl, 9xl, 10xl, 11xl;
$position-unit: t, b, s, e, y, x;

@each $unit in $spacing-unit {
  .gap-#{$unit} {
    @include gap-convert($unit);
  }
  .p-#{$unit} {
    @include padding-convert($unit, a);
  }
  .m-#{$unit} {
    @include margin-convert($unit, a);
  }
  .m-#{$unit}-n {
    @include margin-convert($unit, a, false);
  }
}

@each $position in $position-unit {
  @each $unit in $spacing-unit {
    .p#{$position}-#{$unit} {
      @include padding-convert($unit, $position);
    }
    .m#{$position}-#{$unit} {
      @include margin-convert($unit, $position);
    }
    .m#{$position}-#{$unit}-n {
      @include margin-convert($unit, $position, false);
    }
  }
}
// class for media type
// rule: <type>-<breakpoint>-<unit>
// eg: p-md-xs -> padding medium devices x-small
// eg: mt-lg-xs-n -> margin large devices x-small negative
// X-Small devices (portrait phones, less than 576px)
// No media query for `xs` since this is the default in CoreUI
$breackpoint-unit: (
  // Small devices (landscape phones, 576px and up)
  'sm': 576px,
  // Medium devices (tablets, 768px and up)
  'md': 768px,
  // Large devices (desktops, 992px and up)
  'lg': 992px,
  // X-Large devices (large desktops, 1200px and up)
  'xl': 1200px,
  // XX-Large devices (larger desktops, 1400px and up)
  'xxl': 1400px
);

@each $breakpoint, $break-unit in $breackpoint-unit {
  @media (min-width: #{$break-unit}) {
    @each $unit in $spacing-unit {
      .gap-#{$breakpoint}-#{$unit} {
        @include gap-convert($unit);
      }
      .p-#{$breakpoint}-#{$unit} {
        @include padding-convert($unit, a);
      }
      .m-#{$breakpoint}-#{$unit} {
        @include margin-convert($unit, a);
      }
      .m-#{$breakpoint}-#{$unit}-n {
        @include margin-convert($unit, a, false);
      }
    }

    @each $position in $position-unit {
      @each $unit in $spacing-unit {
        .p#{$position}-#{$breakpoint}-#{$unit} {
          @include padding-convert($unit, $position);
        }
        .m#{$position}-#{$breakpoint}-#{$unit} {
          @include margin-convert($unit, $position);
        }
        .m#{$position}-#{$breakpoint}-#{$unit}-n {
          @include margin-convert($unit, $position, false);
        }
      }
    }
  }
}

/**
 * radius rules:
 * exp rounded-top-xxs -> border radius top xxs
 * exp rounded-xxs -> border radius all xss
 */

$radius-unit: none, xxs, xs, sm, md, lg, xl, 2xl, 3xl, 4xl;
$radius-position: top, bottom, left, right, left-start, left-end, right-start, right-end, top-left, top-right,
  bottom-left, bottom-right;

@each $unit in $radius-unit {
  .rounded-#{$unit} {
    @include radius-convert($unit, a);
  }
}

@each $position in $radius-position {
  @each $unit in $radius-unit {
    .rounded-#{$position}-#{$unit} {
      @include radius-convert($unit, $position);
    }
  }
}

/**
  * render text color , background color:
  * rule: text-<color>
  * rule: bg-<color>
  */
$color-range: 25, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950;
$color-code: 'brand', 'gray', 'info', 'success', 'warning', 'danger';

@each $code in $color-code {
  @each $color in $color-range {
    .text-#{$code}-#{$color} {
      color: var(--#{$code}-#{$color}) !important;
    }
    .bg-#{$code}-#{$color} {
      background-color: var(--#{$code}-#{$color}) !important;
    }
  }
}

/**
  * render border color:
  * rule: bg-<color>
  */
$border-position: top, bottom, left, right;
@each $code in $color-code {
  @each $color in $color-range {
    .border-#{$code}-#{$color} {
      border: 1px solid var(--#{$code}-#{$color}) !important;
    }
    @each $pos in $border-position {
      .border-#{$pos}-#{$code}-#{$color} {
        border-#{$pos}: 1px solid var(--#{$code}-#{$color}) !important;
      }
    }
  }
}

.text-base-white {
  color: var(--base-white);
}

.text-base-black {
  color: var(--base-black);
}

.border-base-white {
  border-color: var(--base-white);
}

.border-base-black {
  border-color: var(--base-black);
}
